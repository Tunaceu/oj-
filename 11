#include <iostream>
#include <string>
#include <cstring>
#include <vector>
#include <unordered_map>

using namespace std;

class Digit { // class Digit represent a digit in base 10
    int digit;
public:
    Digit() {
        digit = 0;
    }
    Digit(int d) : digit(d % 10) {}
    void setDigit(int d) { digit = d % 10; }
    int getDigit() const {return digit;}
};

class Integer { //class Integer represent a poistive integer
    Digit value[1000];
public:
    int getValue(int index) const {
        return value[index].getDigit();
    }
    void setValue(int index, int data) {
        value[index].setDigit(data);
    }
    bool isZero() {
        for (int i = 0; i < 1000; i++) {
            if (this -> getValue(i) != 0) {
                return false;
            }
        }
        return true;
    }
    //construct an integer in base 10 using a string.
    //This constructor will convert the given string to integer if possible.
    //Otherwise it will convert the digit part in prefix of the given string.
    Integer(string n) {
        for (int i = 0; i < 1000; i++) {
            value[i].setDigit(0);
        }
        int head = 0, tail = 0;
        bool check = false;
        for (int i = 0; i < n.size(); i++) {
            if (!isdigit(n.at(i)) && check) {
                tail = i;
                break;
            }
            if (i == n.size()-1 && check) {
                tail = n.size();
                break;
            }
            if (isdigit(n.at(i)) && !check) {
                head = i;
                check = true;
            }
        }
        int j = 999;
        if (head != 0 || tail != 0) {
            for (int i = tail-1; i >= head; i--) {
                value[j].setDigit(n.at(i) - '0');
                j--;
            }
        }
    }
    //default constructor will construct an Integer object with value 0.
    Integer() {
        for (int i = 0; i < 1000; i++) {
            value[i].setDigit(0);
        }
    }
    //Display the value in given base from 2 to 16.
    //Order of symbol as 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    void displayInBase(int base) const {
        Integer result, temp;
        string output = "";
        for (int i = 0; i < 1000; i++) {
            result.setValue(i, this -> getValue(i));
        }
        while (!result.isZero()) {
            int c = 0;

            for (int i = 0; i < 1000; i++) {
                int current = result.getValue(i) + c * 10;
                c = current % base;
                temp.setValue(i, current / base);
            }

            for (int i = 0; i < 1000; i++) {
                result.setValue(i, temp.getValue(i));
            }
            if (c < 10) {
                output = to_string(c) + output;
            }
            else {
                char ch = 'A';
                ch += c - 10;
                output = ch + output;
            }
        }
        cout << output;
    }
};
